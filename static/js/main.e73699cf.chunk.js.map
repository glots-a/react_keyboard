{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","wasPresed","keyPres","document","addEventListener","e","setState","key","className","this","React","Component","ReactDOM","render","getElementById"],"mappings":"oNAOaA,EAAb,4MACEC,MAAQ,CACNC,WAAW,EACXC,QAAS,MAHb,uDAME,WAA2B,IAAD,OACxBC,SAASC,iBAAiB,SAAS,SAACC,GAClC,EAAKC,SAAS,CACZL,WAAW,EACXC,QAASG,EAAEE,WAVnB,kCAeE,WAA8B,IAAD,OAC3BJ,SAASC,iBAAiB,SAAS,SAACC,GAClC,EAAKC,SAAS,CACZL,WAAW,EACXC,QAASG,EAAEE,WAnBnB,oBAgCE,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,mBAAGA,UAAU,eAAb,SAEIC,KAAKT,MAAMC,UAAX,mCACgCQ,KAAKT,MAAME,QAD3C,KAEI,kCAvChB,GAAyBQ,IAAMC,W,MCF/BC,IAASC,OACP,cAAC,EAAD,IACAV,SAASW,eAAe,W","file":"static/js/main.e73699cf.chunk.js","sourcesContent":["import React from 'react';\n\ntype State = {\n  wasPresed: boolean;\n  keyPres: null | string;\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    wasPresed: false,\n    keyPres: null,\n  };\n\n  componentDidMount(): void {\n    document.addEventListener('keyup', (e: KeyboardEvent) => {\n      this.setState({\n        wasPresed: true,\n        keyPres: e.key,\n      });\n    });\n  }\n\n  componentWillUnmount(): void {\n    document.addEventListener('keyup', (e: KeyboardEvent) => {\n      this.setState({\n        wasPresed: true,\n        keyPres: e.key,\n      });\n    });\n  }\n\n  // handlePressKey(e: KeyboardEvent) {\n  //   this.setState({\n  //     wasPresed: true,\n  //     keyPres: e.key,\n  //   });\n  // }\n  // => then I used  handlePressKey methot I got an error.\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p className=\"App__message\">\n          {\n            this.state.wasPresed\n              ? `The last pressed key is [${this.state.keyPres}]`\n              : 'Nothing was pressed yet'\n          }\n        </p>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}